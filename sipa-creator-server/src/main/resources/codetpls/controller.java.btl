package ${package.Controller};
<% if(isNotEmpty(controllerMethods.hasMethod)){  %>

import javax.annotation.Resource;
<% } %>

<% if(isNotEmpty(controllerMethods.list)){  %>
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<% } %>
import com.sipa.boot.core.pojo.form.IdsForm;
import com.sipa.boot.mvc.allinone.SipaRest;
<% if(isNotEmpty(superControllerClassPackage)){ %>
import ${superControllerClassPackage};
<% } %>
<% if(restControllerStyle){ %>
import ${packageParent}.api.${table.entityName}Api;
<% } %>
import ${packageParent}.form.${table.entityName}Form;
import ${packageParent}.form.${table.entityName}PageForm;
<% if(isNotEmpty(controllerMethods.hasMethod)){  %>
import ${package.Service}.${table.serviceName};
<% } %>
import ${packageParent}.vo.${table.entityName}Vo;

import lombok.extern.slf4j.Slf4j;

/**
 * @author ${author}
 * @date ${date}
 */
@Slf4j
<% if(restControllerStyle){ %>
@SipaRest(tag = ${table.entityName}Api.MappingConstant.TAG, path = ${table.entityName}Api.MappingConstant.PATH)
<% } %>
<% if(kotlin){ %>
class ${table.controllerName}<% if(isNotEmpty(superControllerClass)){ %> : ${superControllerClass}()<% } %>
<% }else{ %>
    <% if(isNotEmpty(superControllerClass)){ %>
public class ${table.controllerName} extends ${superControllerClass} implements ${table.entityName}Api {
    <% }else{ %>
public class ${table.controllerName} implements ${table.entityName}Api {
    <% } %>
    <%
       var serviceInstanceName = @cn.hutool.core.util.StrUtil.lowerFirst(table.serviceName);
    %>
    <% if(isNotEmpty(controllerMethods.hasMethod)){  %>
    @Resource
    private ${table.serviceName} ${serviceInstanceName};
    <% } %>
    <% if(isNotEmpty(controllerMethods.list)){  %>

    @Override
    public Page<${table.entityName}Vo> page(${entity}PageForm form) {
        return null;
    }
    <% } %>
    <% if(isNotEmpty(controllerMethods.getById)){ %>

    @Override
    public ${table.entityName}Vo getById(String id) {
        return null;
    }
    <% } %>
    <% if(isNotEmpty(controllerMethods.create)){ %>

    @Override
    public Object create(${table.entityName}Form form) {
        return null;
    }
    <% } %>
    <% if(isNotEmpty(controllerMethods.delete)){ %>

    @Override
    public Object delete(IdsForm form) {
        return null;
    }
    <% } %>
    <% if(isNotEmpty(controllerMethods.update)){ %>

    @Override
    public Object update(${table.entityName}Form form) {
        return null;
    }
    <% } %>
}
<% } %>
